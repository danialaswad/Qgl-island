package fr.unice.polytech.qgl.qdd.ai.sequences.terrestrialsequences;

import fr.unice.polytech.qgl.qdd.ai.sequences.SequencesTest;
import fr.unice.polytech.qgl.qdd.enums.Biome;
import fr.unice.polytech.qgl.qdd.enums.Resource;
import fr.unice.polytech.qgl.qdd.navigation.Tile;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import java.util.*;
import java.util.function.Supplier;

/**
 * Created by danialaswad on 04/02/2016.
 */
public class ExploitSequenceTest extends SequencesTest {

    private ExploitSequence exploitSequence;

    @Before
    public void setup(){
        newExplorer();
        setPosition(7,7);
        List<Biome> biomes = new ArrayList<>();
        biomes.add(Biome.TROPICAL_RAIN_FOREST);
        Map<Resource,String> resources = new HashMap<>();
        resources.put(Resource.SUGAR_CANE,"HIGH");

        nav.map().updateMapThroughScan(biomes,true);
        nav.map().updateMapWithResources(resources);
    }

    @Test
    public void exploitSequenceBasicTest(){
        exploitSequence = new ExploitSequence(nav,getExplorerAI().getCheckList(),getExplorer().getContract(),getExplorer().getResources());

        Assert.assertEquals(1,exploitSequence.selectResourcesToExploit().size());

        Assert.assertEquals(true, getExplorerAI().getCheckList().getResourcesToCollect().contains(Resource.SUGAR_CANE));

        Assert.assertEquals("exploit", exploitSequence.execute().getAction());

        Assert.assertEquals("SUGAR_CANE", exploitSequence.execute().getStringParam("resource"));

        getExplorer().exploit(Resource.SUGAR_CANE,20);

        nav.map().currentTile().setExploited(true);

        Assert.assertTrue(exploitSequence.completed());
    }

    @Test
    public void resourceToCollectTest(){
        exploitSequence = new ExploitSequence(nav,getExplorerAI().getCheckList(),getExplorer().getContract(),getExplorer().getResources());

        Assert.assertEquals(4, getExplorer().getResourcesToCollect().size());
        Assert.assertTrue(getExplorer().getResourcesToCollect().contains(Resource.WOOD));
        Assert.assertTrue(getExplorer().getResourcesToCollect().contains(Resource.FRUITS));
        Assert.assertTrue(getExplorer().getResourcesToCollect().contains(Resource.FISH));
        Assert.assertTrue(getExplorer().getResourcesToCollect().contains(Resource.SUGAR_CANE));

        List<Biome> biomes = new ArrayList<>();
        biomes.add(Biome.MANGROVE);
        biomes.add(Biome.BEACH);
        nav.map().updateMapThroughScan(biomes,true);
        Map<Resource,String> resourceStringMap = new HashMap<>();
        resourceStringMap.put(Resource.WOOD,"HIGH");
        nav.map().updateMapWithResources(resourceStringMap);

        getExplorer().exploit(Resource.WOOD, 600);
        Assert.assertEquals(600, getExplorer().getResourceQuantity(Resource.WOOD));
        Assert.assertEquals(3, getExplorer().getResourcesToCollect().size());
    }

    @Test
    public void exploitTwoResourcesOnOneTileTest(){
        setPosition(12,12);
        exploitSequence = new ExploitSequence(nav,getExplorerAI().getCheckList(),getExplorer().getContract(),getExplorer().getResources());
        List<Biome> biomes = new ArrayList<>();
        biomes.add(Biome.MANGROVE);
        biomes.add(Biome.TROPICAL_RAIN_FOREST);
        nav.map().updateMapThroughScan(biomes,true);
        Map<Resource,String> resourceStringMap = new HashMap<>();
        resourceStringMap.put(Resource.WOOD,"HIGH");
        resourceStringMap.put(Resource.FRUITS,"HIGH");
        nav.map().updateMapWithResources(resourceStringMap);

        Assert.assertEquals("exploit", exploitSequence.execute().getAction());
//        Assert.assertEquals("FRUITS", exploitSequence.execute().getStringParam("resource"));

        getExplorer().exploit(Resource.FRUITS, 24);
        Assert.assertEquals(false, exploitSequence.completed());

        Assert.assertEquals("exploit", exploitSequence.execute().getAction());
//        Assert.assertEquals("WOOD", exploitSequence.execute().getStringParam("resource"));

        getExplorer().exploit(Resource.WOOD, 24);
        Assert.assertEquals(true, exploitSequence.completed());

        Assert.assertEquals(true, nav.map().currentTile().getResources().isEmpty());

    }
}
